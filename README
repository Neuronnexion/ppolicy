                Modular Python Postfix Policy Server
                ====================================

Modular Python Postfix Policy Server is tool for extending postfix
checking capabilities and can reduce mailserver load rejecting
incorrect mail during SMTP connection. It was made with stress to hight
reliability and performance by providing multilevel caching of
required data and results.

Because it has modular design it can be easily extended by custom
modules (only one method has to be implemented and everything else is
handled automatically). By default it provide dummy modules returning
actions confirming postfix access(5) actions, SPF checking, domain
mailhost checking, sender/recipient verification, black/white listing,
list conforming postfix access(5) table, greylisting, spam traps, ...
It also provide configuration mechanism to make logical AND, OR, NOT
and IF, three state IF, SWITCH with results of each module.



1. Installation

1.1 Requirements

postfix           >= 2.1           - http://www.postfix.org
python            >= 2.3           - http://www.python.org
python-twisted    >= 1.3           - http://twistedmatrix.com
* MySQL           >= 3.23 (I hope) - http://www.mysql.com
* dnspython       >= 1.3.3         - http://www.dnspython.org

* required by some check modules


1.2 PPolicy download

Primary site for this PPolicy server is
http://kmlinux.fjfi.cvut.cz/~vokac/activities/ppolicy. You can
download there prebuild RPM package or sources in SRPM and tgz format.


1.3 PPolicy installation

1.3.1 Install from RPM

rpm -Uvh ppolicy-1.x.x.noarch.rpm

1.3.2 Install from sources

Rebuild SRPM package or install application directly from tgz package.

* building SRPM:
  rpmbuild --rebuild ppolicy-1.x.x.src.rpm
  rpm -Uvh /path/to/builded/package/ppolicy-1.x.x.noarch.rpm

* building tgz:
  tar xzf ppolicy-1.x.x.tar.gz
  cd ppolicy-1.x.x
  python setup.py install



2. Configuration

2.1 PPolicy

Configuration of ppolicy daemon is done through ppolicy.conf file. Default
location for this file is /etc/postfix/ppolicy.conf. If you place this file
somewhere else than you have to change this information in ppolicy.tap
twisted bootstrap file.

There are plenty of comments and examples in ppolicy.conf so you should
be able to adapt it to your needs. For details about particular check
modules you can read class description in checks.py.


2.2 Postfix configuration

Update configuration according following examples and adapt to your needs.

/etc/postfix/main.cf:
    smtpd_recipient_restrictions =
        ...
        reject_unauth_destination
        check_policy_service inet:127.0.0.1:1030
        ...
    127.0.0.1:1030_time_limit = 3600


2.2 Database configuration

Database is used to permanently store result of some expensive
checks. In most cases it should be possible to run ppolicy without
database backend but it is not recommended because of degraded
performance and (may be) more bug (it was not fully tested without
database).

Only MySQL database was tested with ppolicy but it should not be
difficult to adapt to any SQL database. You have to create new ppolicy
database and change database connection information in configuration
file ppolicy.conf. User you use to connect to ppolicy database must
have rights to create new tables. All required tables are created
automatically during ppolicy server startup.



3. Modules

3.1 Existing modules

3.1.1 Base

* PPolicyCheckBase - base module class
* DummyCheck - dummy testing module

3.1.2 Simple Modules

* SimpleCheck - base class for all following modules inheriting from
    PPolicyCheckBase
* OkCheck
* Reject4xxCheck
* Reject5xxCheck
* RejectCheck
* DeferIfRejectCheck
* DeferIfPermitCheck
* DiscardCheck
* DunnoCheck
* FilterCheck
* HoldCheck
* PrependCheck
* RedirectCheck
* WarnCheck

3.1.3 Logical operator and conditional calling of modules

* LogicCheck - base class for all logical modules inheriting from
    PPolicyCheckBase
* AndCheck
* OrCheck
* NotCheck
* EqCheck
* IfCheck
* If3Check
* SwitchCheck

3.1.4 Real modules

* ListCheck
* ListWBCheck
* SPFCheck
* DomainVerificationCheck
* UserVerificationCheck
* GreylistCheck


3.2. Writing new modules

Before you start to write custom modules look at IPPolicyServerCheck,
PPolicyServerCheckBase, DummyCheck. There are plenty of comments that
can be useful to know. If your module use database look at some
example e.g. ListsCheck module. You can see how to get connection from
database pool.



4. Bug reports

If you find some bug or performance bottleneck than let me know or
better send me patch. You can contact me using following address

Petr Vokac <vokac[at]kmlinux.fjfi.cvut.cz>
