#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Configuration file for PPolicy
#
# Copyright (c) 2005 JAS
#
# Author: Petr Vokac <vokac@kmlinux.fjfi.cvut.cz>
#
# $Id$
#
import logging


#
# logging (FATAL, ERROR, WARN, INFO, DEBUG)
#
logLevel = logging.DEBUG


#
# contact in case of some problems
# (without correct values some check modules doesn't work right)
#
admin = 'postmaster@example.com' # recomended: postmaster
domain = 'example.com'     # recomended: your.domain.name, default: host.domain


#
# Database settings
#
databaseAPI = 'MySQLdb'
database = { 'host'   : 'localhost',
             'port'   : 3306,
             'db'     : 'ppolicy',
             'user'   : 'ppolicy',
             'passwd' : 'secret',
             }


#
# PPolicy daemon listen port
#
listenPort      = 10030


#
# Define check modules and its parameters. These modules can be
# referenced by its unique name in check function.
# format: { name: (type, param), ... }
#   name ... unique module name
#   type ... module type (SPF, List, Greylist, ...)
#   param .. dictionary of module parameters, e.g. { param: "sender", ... }
#
modules = {
    'dumpfile': ('DumpDataFile', { 'fileName': '/tmp/dump.dat' }),
    'dumpdb': ('DumpDataDB', {}),
    'spf': ('SPF', {}),
    'dos': ('DOS', { 'params': 'sender' }),
    'mx': ('Verification', { 'param': 'sender', 'vtype': 'mx' }),
    'connection': ('Verification', { 'param': 'sender' }),
    'domain': ('Verification', { 'param': 'sender', 'vtype': 'domain' }),
    'user': ('Verification', { 'param': 'sender', 'vtype': 'user' }),
    'greylist': ('Greylist', {}),
    'dnsbl_ordb': ('Dnsbl', { 'dnsbl': 'ORDB' }),
    'dnsbl_njabl': ('Dnsbl', { 'dnsbl': 'NJABL' }),
    'dnsbl_sbl': ('Dnsbl', { 'dnsbl': 'SBL' }),
    'dnsbl_xbl': ('Dnsbl', { 'dnsbl': 'XBL' }),
    'dnsbl_spamcop': ('Dnsbl', { 'dnsbl': 'SPAMCOP' }),
    'dnsbl_sorbs': ('Dnsbl', { 'dnsbl': 'SORBS' }),
    'dnsbl_maps': ('Dnsbl', { 'dnsbl': 'MAPS-RBLPLUS' }),
    'dnsblscore': ('DnsblScore', {}),
    'dnsbldynamic': ('DnsblDynamic', {}),
#    '': ('', {}),
    }


#
# What to return if number of connection to ppolicy daemon reaches its limit
#
returnOnConnLimit = ('450', 'reached connection limit to ppolicy, retry later')
#returnOnFatalError = ('dunno', '')


#
# What to return when fatal error (e.g. uncatched exception) happen
#
returnOnFatalError = ('450', 'fatal error when checking SMTP data, retry later')
#returnOnFatalError = ('dunno', '')


#
# Method for checking requests
#
def check(factory, data):
#    if factory.check('spf', data) < 0 and factory.check('xxx', data) < 0:
#        result('450', '')
    res, resEx = factory.check('connection', data=data)
    data['result_connection'] = res
    data['result_connection_info'] = resEx
    res, resEx = factory.check('spf', data=data)
    data['result_spf'] = res
    data['result_spf_info'] = resEx
    res, resEx = factory.check('greylist', data=data)
    data['result_greylist'] = res
    data['result_greylist_info'] = resEx
    res, resEx = factory.check('dnsbl_xbl', data=data)
    data['result_dnsbl_xbl'] = res
    data['result_dnsbl_xbl_info'] = resEx
    res, resEx = factory.check('dnsblscore', data=data)
    data['result_dnsblscore'] = res
    data['result_dnsblscore_info'] = resEx
    res, resEx = factory.check('dnsbldynamic', data=data)
    data['result_dnsbldynamic'] = res
    data['result_dnsbldynamic_info'] = resEx
    factory.check('dumpdb', data=data)
#    factory.check('dumpfile', data)
    return 'dunno', ''
