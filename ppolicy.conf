#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Configuration file for PPolicy
#
# Copyright (c) 2005 JAS
#
# Author: Petr Vokac <vokac@kmlinux.fjfi.cvut.cz>
#
# $Id$
#
import logging


#
# logging (FATAL, ERROR, WARN, INFO, DEBUG)
#
logLevel = logging.DEBUG


#
# contact in case of some problems
# (without correct values some check modules doesn't work right)
#
admin = 'postmaster@example.com' # recomended: postmaster
domain = 'example.com'     # recomended: your.domain.name, default: host.domain


#
# Database settings
#
databaseAPI = 'MySQLdb'
database = { 'host'   : 'localhost',
             'port'   : 3306,
             'db'     : 'ppolicy',
             'user'   : 'ppolicy',
             'passwd' : 'secret',
             }


#
# PPolicy daemon listen port
#
listenPort      = 10030


#
# Define check modules and its parameters. These modules can be
# referenced by its unique name in check function.
# format: { name: (type, param), ... }
#   name ... unique module name
#   type ... module type (SPF, List, Greylist, ...)
#   param .. dictionary of module parameters, e.g. { param: "sender", ... }
#
modules = {
    'dumpfile': ('DumpDataFile', { 'fileName': '/tmp/dump.dat' }),
    'dumpdb': ('DumpDataDB', {}),
    'spf': ('SPF', {}),
    'dos': ('DOS', { 'params': 'sender' }),
    'domain': ('Verification', { 'param': 'sender' }),
    'user': ('Verification', { 'param': 'sender', 'vtype': 'user' }),
    'greylist': ('Greylist', {}),
#    '': ('', {}),
    }


#
# Method for checking requests
#
def check(modules, data):
#    if __check(modules, data, 'spf') < 0 and __check(modules, data, 'xxx') < 0:
#        result('450', '')
#    __check(modules, data, 'dumpfile')
    if __check(modules, data, 'domain') < 0:
        result('450', '')
    __check(modules, data, 'dumpdb')
    return 'dunno', ''


#
# Don't remove this function. It is used by check function to simplify
# calling check methods and handling exceptions
#
def __check(modules, data, module):
    if not modules.has_key(module):
        raise Exception("Module named \"%s\" was not defined" % module)
    try:
        obj = modules.get(module)
        return obj.check(data)
    except Exception, e:
        logging.getLogger().error("calling check method of \"%s\" module failed: %s" % (module, e))
        # raise e
        return 0, "%s failed with exception" % module
