#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# TAP start file
#
# Copyright (c) 2005 JAS
#
# Author: Petr Vokac <vokac@kmlinux.fjfi.cvut.cz>
#
# $Id$
#
import os, sys, imp
import socket
import logging
from ppolicy.log import TwistedHandler
from ppolicy.protocol import PPolicyServerRequest, PPolicyServerFactory
from twisted.application import internet, service
from twisted.internet import reactor, protocol

# default config
config = {
    'configFile'   : '/etc/postfix/ppolicy.conf',
    'logLevel'     : logging.ERROR,
    'admin'        : 'postmaster',
    'domain'       : socket.gethostname(),
    'databaseAPI'  : 'MySQLdb',
    'database'     : { 'host'   : 'localhost',
                       'port'   : 3306,
                       'db'     : 'ppolicy',
                       'user'   : 'ppolicy',
                       'passwd' : 'secret',
                       },
    'listenPort'   : 10030,
    'check'        : lambda x: ('dunno', ''),
    'modules'      : {},
}


# logging
twistedHandler = TwistedHandler()
#twistedHandler.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s](%(module)s:%(lineno)d) %(message)s", "%d %b %H:%M:%S"))
twistedHandler.setFormatter(logging.Formatter("[%(levelname)s](%(module)s:%(lineno)d) %(message)s"))
logging.getLogger().addHandler(twistedHandler)
logging.getLogger().setLevel(config['logLevel'])


# import configuration file
if not os.path.isfile(config['configFile']):
    msg = "Configuration file %s doesn't exist" % config['configFile']
    logging.log(logging.ERROR, msg)
    sys.stderr.write("%s\n" % msg)
    sys.exit(1)

try:
    ppolicy_config = imp.load_source("ppolicy_config", config['configFile'])
except ImportError, err:
    msg = "Error importing config file %s: %s" % (config['configFile'], err)
    logging.log(logging.ERROR, msg)
    sys.stderr.write("%s\n" % msg)
    sys.exit(1)
except Exception, err:
    msg = "Error loading config: %s" % err
    logging.log(logging.ERROR, msg)
    sys.stderr.write("%s\n" % msg)
    sys.exit(1)


# get configuration from config file
for key in config.keys():
    if hasattr(ppolicy_config, key):
        config[key] = getattr(ppolicy_config, key)
logging.getLogger().setLevel(config['logLevel'])


# start twisted application
reactor.suggestThreadPoolSize(40)
application = service.Application("PPolicyServer")
factory	= PPolicyServerFactory(PPolicyServerRequest, config)
internet.TCPServer(config['listenPort'], factory).setServiceParent(application)
